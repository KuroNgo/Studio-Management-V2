definitions:
  model.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.User:
    properties:
      avatarUser:
        items:
          type: integer
        type: array
      createdAt:
        type: string
      email:
        type: string
      enable:
        type: integer
      fullName:
        type: string
      id:
        description: Tên thuộc tính được đặt trong golang phải là ID nếu kiểu dữ liệu
          là uuid.UUID
        type: string
      password:
        type: string
      phone:
        type: string
      photo:
        items:
          type: integer
        type: array
      provider:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
      verified:
        type: boolean
      who_updates:
        type: string
    type: object
  model.UserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8000/
info:
  contact:
    email: hoaiphong01012002@gmai.com
    name: Ngô Hoài Phong
    url: http://www.swagger.io/support
  description: |-
    Đây là API của Cỏ Studio,
    Việc sử dụng API này phải có sự đồng ý của Mr. Phong
  title: Cỏ Studio API
  version: "1.0"
paths:
  /admin/category/create:
    post:
      consumes:
      - application/json
      description: create category
      produces:
      - application/json
      responses: {}
      summary: create category
      tags:
      - category
  /admin/category/update:
    put:
      consumes:
      - application/json
      description: create category
      produces:
      - application/json
      responses: {}
      summary: update category
      tags:
      - category
  /admin/product/create:
    post:
      consumes:
      - application/json
      description: create product
      produces:
      - application/json
      responses: {}
      summary: create product
      tags:
      - products
  /admin/product/enable:
    patch:
      consumes:
      - application/json
      description: update enable product
      produces:
      - application/json
      responses: {}
      summary: update enable product
      tags:
      - products
  /admin/product/get-update-date:
    get:
      consumes:
      - application/json
      description: get product by updates date
      produces:
      - application/json
      responses: {}
      summary: get product by updates date
      tags:
      - products
  /admin/product/get-who-update:
    get:
      consumes:
      - application/json
      description: get product by who updates
      produces:
      - application/json
      responses: {}
      summary: get product by who updates
      tags:
      - products
  /admin/product/remove-first:
    patch:
      consumes:
      - application/json
      description: update product
      produces:
      - application/json
      responses: {}
      summary: update product
      tags:
      - products
  /admin/product/update:
    post:
      consumes:
      - application/json
      description: update product
      produces:
      - application/json
      responses: {}
      summary: update product
      tags:
      - products
  /admin/product/update-enable:
    patch:
      consumes:
      - application/json
      description: update product
      produces:
      - application/json
      responses: {}
      summary: update-enable product
      tags:
      - products
  /client/category/delete:
    patch:
      consumes:
      - application/json
      description: delete category
      produces:
      - application/json
      responses: {}
      summary: delete category
      tags:
      - category
  /client/category/delete-second:
    delete:
      consumes:
      - application/json
      description: delete category with admin
      produces:
      - application/json
      responses: {}
      summary: delete category with admin
      tags:
      - category
  /client/category/get-all:
    get:
      consumes:
      - application/json
      description: get all categories
      produces:
      - application/json
      responses: {}
      summary: get all categories
      tags:
      - category
  /client/category/get-enable/:enable:
    get:
      consumes:
      - application/json
      description: get category by update date
      produces:
      - application/json
      responses: {}
      summary: get category by update date
      tags:
      - category
  /client/category/get-update-date/:update_date:
    get:
      consumes:
      - application/json
      description: get category by update date
      produces:
      - application/json
      responses: {}
      summary: get category by update date
      tags:
      - category
  /client/category/get/:category_id:
    get:
      consumes:
      - application/json
      description: get category by id
      produces:
      - application/json
      responses: {}
      summary: get category by id
      tags:
      - category
  /client/category/get2/:category_id:
    get:
      consumes:
      - application/json
      description: get category by id
      produces:
      - application/json
      responses: {}
      summary: get category by id
      tags:
      - category
  /client/category/resolve:
    patch:
      consumes:
      - application/json
      description: resolve category with admin
      produces:
      - application/json
      responses: {}
      summary: resolve category with admin
      tags:
      - category
  /client/get-all-user:
    get:
      consumes:
      - application/json
      description: get all user item
      produces:
      - application/json
      responses: {}
      summary: get all user
      tags:
      - users
  /client/get-user:
    get:
      consumes:
      - application/json
      description: get a new user item
      produces:
      - application/json
      responses: {}
      summary: get user
      tags:
      - users
  /client/get-user-role:
    get:
      consumes:
      - application/json
      description: get user by role
      produces:
      - application/json
      responses: {}
      summary: get user role
      tags:
      - users
  /client/get-user/email:
    get:
      consumes:
      - application/json
      description: get user by email
      produces:
      - application/json
      responses: {}
      summary: get user email
      tags:
      - users
  /client/get-user/role:
    get:
      consumes:
      - application/json
      description: get user by role
      produces:
      - application/json
      responses: {}
      summary: get user role
      tags:
      - users
  /client/get-user/username:
    get:
      consumes:
      - application/json
      description: get a new user item by username
      produces:
      - application/json
      responses: {}
      summary: get user
      tags:
      - users
  /client/login/email:
    post:
      consumes:
      - application/json
      description: login user item
      parameters:
      - description: login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.SignInInput'
      produces:
      - application/json
      responses: {}
      summary: login user
      tags:
      - users
  /client/login/username:
    post:
      consumes:
      - application/json
      description: login user with username
      parameters:
      - description: login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses: {}
      summary: login user
      tags:
      - users
  /client/logout:
    get:
      consumes:
      - application/json
      description: logout item
      produces:
      - application/json
      responses: {}
      summary: logout user
      tags:
      - users
  /client/product/get-all:
    get:
      consumes:
      - application/json
      description: get all products
      produces:
      - application/json
      responses: {}
      summary: get all products
      tags:
      - products
  /client/product/get-id:
    get:
      consumes:
      - application/json
      description: get product by id
      produces:
      - application/json
      responses: {}
      summary: get product by id
      tags:
      - products
  /client/product/get-name:
    get:
      consumes:
      - application/json
      description: get product by name
      produces:
      - application/json
      responses: {}
      summary: get product by name
      tags:
      - products
  /client/product/get-price:
    get:
      consumes:
      - application/json
      description: get product by price
      produces:
      - application/json
      responses: {}
      summary: get product by price
      tags:
      - products
  /client/refresh:
    get:
      consumes:
      - application/json
      description: refresh token item
      produces:
      - application/json
      responses: {}
      summary: refresh token user
      tags:
      - users
  /client/register:
    post:
      consumes:
      - application/json
      description: Create a new user item
      parameters:
      - description: register user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses: {}
      summary: register user
      tags:
      - users
  /client/update:
    put:
      consumes:
      - application/json
      description: update a new user item
      parameters:
      - description: login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses: {}
      summary: login user
      tags:
      - users
swagger: "2.0"
